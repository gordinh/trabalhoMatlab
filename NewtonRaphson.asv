function NewtonRaphson(f, Xo, erroTolerance, realRoot, graphic)
    %Método NewtonRapshon (aberto)
    %retorna a raiz estimada da função
    %func = função a ser calculada
    %Xo = estimativa inicial
    %erroTolerance = tolerancia de erro/criterio de parada
    
    %Autor: Lucas Morais e Felipe Cordeiro
    
    %O QUE FALTA: PLOTAR NO GRÁFICO || MOSTRAR RAIZ ESTIMADA POR ITERAÇÃO
    %|| MOSTRAR ERRO DE ESTIMAÇÃO || MOSTRAR ERRO VERDADEIRO || Verificar
    %função
    
    %function f = fun(x)
     %       f=x^3 - 6 * x^2 + 11 * x - 6.1;
    %end
    %function d = der(x)
     %       d = 3*x^2 - 12 * x + 11;
    %end
    
    erro = 100;
    iterador = 0;
    phi = polyder(f); %calculando derivada
    vectorX = [];
    vectorY = [];
    while (erro > erroTolerance)
        iterador = iterador + 1; %iterador de controle
        disp ('iterador: '), disp (iterador)
        xold = Xo; %salvando valor antigo
        fx = polyval(f, Xo); %calculando valor de f(Xn)
        fd = polyval(phi, Xo); %calculando valor de f'(Xn)
        Xo = abs(xold - (fx/fd)); %calculando valor de Xn+1
        vectorX = [vectorX Xo]; %#ok<*AGROW> %adicionando valores de x no vetor
        vectorY = [vectorY fx];  %adicionando valores de y no vetor
        %disp('Xo'), disp(Xo); 
        %disp('fx'), disp(fx); 
        %disp('fd'), disp(fd);
        erro = abs((Xo-xold)/Xo)*100; %calculando erro relativo
        disp ('Erro Relativo:'), disp (erro_abs);
        errorAbsolute = 
    end
    
    disp('Raiz estimada: '), disp(Xo)
    
    
    %%%Gerando os gráficos e imagens a partir daqui
    figure(graphic);
    title('Graph of Newton-Raphson method');
    hold on;
    grid on;
    plot(1:0.2:3, polyval(f, 1:0.2:3), '-r');
    title('Grafico - Newton-Raphson');
    xlabel('x');
    ylabel(f);
    plot(vectorX, vectorY, '.b');
end
